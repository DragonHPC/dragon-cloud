# Default values for dragon.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1


# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""


sharedMemoryVolume:
  name: dragonshm
  sizeLimit: 256Gi
  mountPath: /dev/shm


python:
  packages: []

frontend:
  labels: {}

  # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    repository: harbor.greennitrogen.breckenridge.cloud/us-docker.pkg.dev/clean-silo-405421/dragon-sandbox/dragondev
    # tag: "011"
    tag: latest
    # pullPolicy: IfNotPresent
    pullPolicy: Always

  # This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []

  workingDir: examples/jupyter

  batchName: batch

  command:
    - /bin/bash
    - "-c"

  args:
    - |
      python3 -m dragon.cli dragon-config -a "ucx-build-lib=/usr/lib/x86_64-linux-gnu/:ucx-runtime-lib=/usr/lib/x86_64-linux-gnu/:ucx-include=/usr/include";
      dragon -t hsta --telemetry-level=3 start_jupyter.py;

  env: {}

  ports:
    - containerPort: 8080

  # This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  rbac:
    create: true

  # This is for setting Kubernetes Annotations to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}

  # This is for setting Kubernetes Labels to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # This is to setup the liveness and readiness probes more information can be found here:
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe: {}
  readinessProbe: {}

  volumes:
    - name: dragon-develop-volume
      persistentVolumeClaim:
        claimName: dragon-develop-pvc

  volumeMounts:
    - name: dragon-develop-volume
      mountPath: /dragon-develop

  nodeSelector:
    node-role.kubernetes.io/service: "true"

  affinity: {}

  tolerations: {}

  jobAnnotations: {}
  jobLabels: {}

  ttlSecondsAfterFinished: 300



backend:
  labels: {}

  nnodes: 2

  image:
    repository: harbor.greennitrogen.breckenridge.cloud/us-docker.pkg.dev/clean-silo-405421/dragon-sandbox/dragondev
    # tag: "011"
    tag: latest
    # pullPolicy: IfNotPresent
    pullPolicy: Always

  imagePullSecrets: []

  command:
    - /bin/bash
    - "-c"

  args:
    - |
      python3 -m dragon.cli dragon-config -a "ucx-build-lib=/usr/lib/x86_64-linux-gnu/:ucx-runtime-lib=/usr/lib/x86_64-linux-gnu/:ucx-include=/usr/include";
      dragon-backend;

  env: {}

  ports:
    - containerPort: 8081
    - containerPort: 4242

  serviceAccount:
    create: true
    automount: true
    annotations: {}
    name: ""

  rbac:
    create: true

  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}

  securityContext:
    allowPrivilegeEscalation: true
    capabilities:
      add:
        - IPC_LOCK
        - IPC_OWNER
        - SYS_RESOURCE
    privileged: true
    readOnlyRootFilesystem: false
    runAsNonRoot: false

  resources:
    limits:
      nvidia.com/gpu: 8
    requests:
      nvidia.com/gpu: 8

  livenessProbe: {}
  readinessProbe: {}

  volumes:
    - name: dragon-develop-volume
      persistentVolumeClaim:
        claimName: dragon-develop-pvc

  volumeMounts:
    - name: dragon-develop-volume
      mountPath: /dragon-develop

  nodeSelector:
    node-role.kubernetes.io/compute: "true"

  affinity: {}

  topologySpreadConstraints: {}

  tolerations:
    - key: node-role.kubernetes.io/compute
      operator: Exists
      effect: NoExecute
    - key: nvidia.com/gpu.present
      operator: Exists
      effect: NoSchedule

  jobAnnotations: {}
  jobLabels: {}

  ttlSecondsAfterFinished: 300




# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
jupyterService:
  name: backend-pods-service
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # clusterIP: 10.43.4.77
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8888
  targetPort: 8888
  protocol: TCP

telemetryService:
  name: telemetry-service
  type: ClusterIP
  port: 4242
  targetPort: 4242
  protocol: TCP


# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: "nginx"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: vivid-yak.gw.hou1.aicloud.hpe.com
      paths:
        - name: backend-pods-service
          path: /jupyter
          pathType: ImplementationSpecific
        - name: grafana
          path: /telemetry/
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# For Jupyter notebooks. Set to true when using jupyter.
jupyter:
  enabled: true
  token: ""